2235( Add Two Integers)

 class Solution {
    public int sum(int num1, int num2) {
        return num1+num2;
    }
}

2119( A Number After a Double Reversal)
class Solution {
    public boolean isSameAfterReversals(int num) {
        if (num == 0) return true;
        if (num % 10 == 0) return false;
        return true;
    }
}


2481(Minimum Cuts to Divide a Circle)

class Solution {
    public int numberOfCuts(int n) {
        if(n==1) return 0;
        return n % 2 >0? n: n/2;
        
    }
}

1025(Divisor Game)
class Solution {
    public boolean divisorGame(int n) {
        if(n%2==0)return true;
        else return false;
        
    }
}


292(Nim Game)

class Solution {
    public boolean canWinNim(int n) {
        return n%4!=0;
    }
}

258(Add Digits)

class Solution {
    public int addDigits(int num) {
        while(num >= 10){
            int sum = 0;
            while (num>0) {
                sum += num%10;
                num/= 10;
            }
            num= sum;
        }
        return num;
        
    }
}


1688(Count of Matches in Tournament)

class Solution {
    public int numberOfMatches(int n) {
        int matches = 0;
        while (n > 1) {
            if (n % 2 == 0) {
                matches += n / 2;
                n /= 2;
            } else {
                matches += (n - 1) / 2;
                n = (n - 1) / 2 + 1;
            }
        }
        return matches;
        
    }
}


2413( Smallest Even Multiple)


class Solution {
    public int smallestEvenMultiple(int n) {
        return (2 * n) / gcd(2, n);
    }
    
    private int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}


L2651(Calculate Delayed Arrival Time)
   
    class Solution {
    public int findDelayedArrivalTime(int arrivalTime, int delayedTime) {
        return (arrivalTime + delayedTime) % 24;
    }
    public static void main(String[] args) {
        Solution obj = new Solution();
        System.out.println(obj.findDelayedArrivalTime(15, 5));
        System.out.println(obj.findDelayedArrivalTime(13, 11));
        
    }
}


2485(Find the Pivot Integer)
 
  class Solution {
    public int pivotInteger(int n) { 
        long S = (long)n * (n + 1) / 2;      
        long x = (long) Math.sqrt(S);       
        if (x * x == S) return (int) x;
        return -1;
    }
    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(sol.pivotInteger(8)); 
        System.out.println(sol.pivotInteger(1));
        System.out.println(sol.pivotInteger(4));

    }
}



2600(K Items With the Maximum Sum)

 class Solution {
    public int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {
        int sum = 0;
        int takeOnes = Math.min(numOnes, k);
        sum += takeOnes;
        k -= takeOnes;
        int takeZeros = Math.min(numZeros, k);
        k -= takeZeros;
        sum -= k;
        return sum;
    }
}

2549(Count Distinct Numbers on Board)

class Solution {
    public int distinctIntegers(int n) {
        return n == 1 ? 1 : n - 1;
    }
    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(sol.distinctIntegers(5)); 
        System.out.println(sol.distinctIntegers(3));
        System.out.println(sol.distinctIntegers(1));
    }
}


2769(Find the Maximum Achievable Number)

   class Solution {
    public int theMaximumAchievableX(int num, int t) {
        return num + 2 * t;
    }
}

2806(Account Balance After Rounded Purchase)

  class Solution {
    public int accountBalanceAfterPurchase(int purchaseAmount) {
      int roundedAmount = ((purchaseAmount + 5) / 10) * 10;
        return 100 - roundedAmount;  
    }
}

2582(Pass the Pillow)

class Solution {
    public int passThePillow(int n, int time) {
       int cycle = 2 * (n - 1);
        int t = time % cycle;
        if (t < n) {
            return 1 + t;
        } else {
            return n - (t - (n - 1));
        } 
    }
}























































